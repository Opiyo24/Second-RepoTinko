Create account
    - Name 
    - Last Name
    - Username
    - Email address

Create template
    Development types
    Planners
    Log status

start logging

Dasboard

Export data to excel
    Periodically
    Export button



LOGIN AND LOGOUT

TEMPLATES 

'DIRS' : [BASE_DIR / "templates"]

views.py 

from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm

def authviews(request):
    if request.method == "POST":
        form = UserCreationForm(request.POST or None)
        if form.is_valid():
            form.save()
    else:     
        form = UserCreationForm()
    return render(request, "registration/signup.html", {"form":form})



SETTINGS.PY 

LOGIN_REDIRECT_URL = "base:home"(home view)
LOGOUT_REDIRECT_URL = "base:login"(login view)



BASE.HTML 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    {% block content %}

    {% endblock content %}
</body>
</html>


STATIC/
CSS/
style.css


urls.py

from django.contrib import admin
from django.urls immport path, include
from django.conf import settings 
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path("", include("base.urls", "base"), "base")
] + static(settings.STATIC_URL)































































































AUTHENTICATION AND DYNAMIC views
#################app/decorators.py
from django.http import HttpResponse
from django.shortcuts import redirect 

def unauthenticated_user(view_func):
    def wrapeer_funct(request, *args, **kwargs):
        if request.user.is-authenticated:
            return redirect('home'):
        else:
            return view_funct(request, *rag, **kwargs)

    return wrapper_func


def allowed_users(allowed_roles=[]):
    def decorator(view_func):
        def wrapper_func(request, *args, *kwargs):
            group = None
            if request.user.groups.exists():
                group = request.user.groups.all()[0].name

            if group in allowed_roles:
                return view_func(request, *args, **kwargs)
            else:
                return HttpResponse('You are not authorized to voiew this page.')
    
        return wrapper_func
    return decorator


def admin_only(view_func):
    def wrapper_function(request, *args, **kwargs):
        group = None
        if request.user.groups.exists():
            group = request.user.groups.all()[0].name

        if group == 'customer':
            retrun redirect('user-page')
        
        if group == 'admin':
            retrun view_func(request, *args, **kwargs)
    
    retrun wrapper_function



###################app/views.py - grouping users

from django.contrib.auth.models import Group
from .decorators import unauthenticated_user, allowed_users, admin_only

@login_required(login_url='login')
@allowed_users(allowed_roles['admin'])
def view(request):
    pass


@authenticated_user
def registration(request):

    form = CreateUserForm()
    if request.method == 'POST':
        form = CreateUserForm()
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')

            group = Group.objects.get(name='customer')
            user.groups.add(group)

            messages.success(request, 'Account was created for ' + username)

            return reedirect('login')

    context = {'form' : form}
    return render(request, 'accounts/register.html', context)





{% if request.user.is_staff %}
    navbar options
{% endif %}

        